{"name":"Holdon","tagline":"A simple unique key based cache","body":"holdon\r\n======\r\n\r\n[![build status](https://secure.travis-ci.org/WebReflection/holdon.png)](http://travis-ci.org/WebReflection/holdon)\r\n\r\n# A simple unique key based cache\r\n\r\nSpecially handy in all those situations where one unique id can perform an asynchronous action you don't want to drop the first time is called but you want to store all listeners waiting for such result.\r\n\r\n```js\r\n// module: filereader\r\nvar fs = require('fs');\r\n\r\n// a generic module cache\r\n// with a callback property\r\nvar cache = require('holdon').create(['callback']);\r\n\r\nfunction onFileRead(callback) {\r\n  callback.call(null, this.err, this.res);\r\n}\r\n\r\nmodule.exports = function (path, callback) {\r\n  if (!cache.has(path)) {\r\n    fs.readFile(path, function (err, res) {\r\n      var result = cache.get(path);\r\n      // clean this id\r\n      cache.remove(path);\r\n      // invoke all waiting callbacks\r\n      result.callback.forEach(onFileRead, {err: err, res: res});\r\n    });\r\n  }\r\n  // add the path to the queue\r\n  cache.add(path, callback);\r\n};\r\n```\r\n\r\nIn another file ...\r\n```js\r\nvar filereader = require('filereader');\r\n\r\n// whenever is needed\r\nfilereader('anyFile.md', function (err, res) {\r\n  // do something ...\r\n});\r\n\r\nfilereader('anyFile.md', function (err, res) {\r\n  // do something ...\r\n});\r\n\r\nfilereader('anyFile.md', function (err, res) {\r\n  // do something ...\r\n});\r\n\r\n// it does not matter how many asking, the disk will read it once\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}